description = """Embers - Embedded Sql Reporting.
Embeddable servlets that expose a restricted set of queries for an sql database.
Hosted on github: https://github.com/alfanse/embers.git"""

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.adarshr:gradle-test-logger-plugin:4.0.0"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'com.adarshr.test-logger'

    sourceCompatibility = 21
    targetCompatibility = 21

    repositories {
        mavenCentral()
        mavenLocal()
    }

    ext {
        appName = "Embers"
    }

    group = 'adf.embers'
    version = System.getProperty('build.number', 'DEV-SNAPSHOT')
}

task codeCoverageReport(type: JacocoReport) {
    //swiped from http://csiebler.github.io/blog/2014/02/09/multi-project-code-coverage-using-gradle-and-jacoco/

    // Enable the report to be generated
    dependsOn subprojects*.test

    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir).include("**/build/jacoco/*.exec")

    
    // Configure source and class directories from all subprojects
    sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(subprojects.sourceSets.main.output))
    
    // Enable XML report for CI tools if needed
    reports {
        html.required = true
        xml.required = false
        csv.required = false
        
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
        println "Code coverage reports will be generated at: ${html.outputLocation.get()}"
//        xml.outputLocation = layout.buildDirectory.file('reports/jacoco/jacocoTestReport.xml')

    }
}

// Configure the test task to generate execution data
tasks.withType(Test).configureEach {
    finalizedBy codeCoverageReport
    doLast {
        logger.lifecycle("Test execution completed. Generating JaCoCo report...")
    }
}
