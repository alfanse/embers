package adf.embers.e2e;

import adf.embers.acceptance.EmbersAcceptanceTestBase;
import adf.embers.tools.GetAndLogTables;
import adf.embers.tools.YatspecHttpPostCommandBuilder;
import com.googlecode.yatspec.junit.Notes;
import com.googlecode.yatspec.state.givenwhenthen.ActionUnderTest;
import com.googlecode.yatspec.state.givenwhenthen.GivensBuilder;
import com.googlecode.yatspec.state.givenwhenthen.StateExtractor;
import org.fest.assertions.core.Condition;
import org.fest.assertions.data.MapEntry;
import org.hamcrest.Description;
import org.hamcrest.TypeSafeDiagnosingMatcher;
import org.junit.Before;
import org.junit.Test;
import org.skife.jdbi.v2.Handle;
import yatspec.http.YatspecHttpGetCommand;
import yatspec.http.YatspecHttpPostCommand;
import yatspec.renderers.ResultSetWrapper;

import java.util.List;
import java.util.Map;

import static adf.embers.query.persistence.QueryStatisticsDao.COL_DURATION;
import static adf.embers.query.persistence.QueryStatisticsDao.COL_QUERY_NAME;
import static adf.embers.statics.UrlTools.encodeString;
import static org.fest.assertions.api.Assertions.assertThat;

@Notes("As a developer on a app with a relational database,\n" +
        "I want to maintain a set of user reports, \n" +
        "so that users can access the information they need directly.")
public class PuttingItAllTogetherTest extends EmbersAcceptanceTestBase {

    public static final String QUERY_MOST_RENTED_ITEMS = "findMostRentedItems";
    public static final int MAX_TOLERATED_DURATION = 50;

    private YatspecHttpPostCommand httpPost;
    private YatspecHttpGetCommand httpGet;
    private GetAndLogTables getAndLogTables;

    @Before
    public void setUp() throws Exception {
        getAndLogTables = new GetAndLogTables(this, embersServer.getEmbersDatabase().getDataSource());
    }

    @Test
    public void maintainAReportAgainstADatabase() throws Exception {
        given(aRentalDatabase());
        when(aUserQueryIsCreatedThatWill("Find number of times each item has been rented"));
        thenTheUserCanRunTheQuery();

        when(theUserWantsTheQueryChangedSoThatItWill("Find number of times each item has been rented, sorted least rented first"));
        thenTheUserCanRunTheQuery();

        then(theUserChecksTheQueriesPerformance(), andIsHappyItsFastEnough());
    }

    private ActionUnderTest aUserQueryIsCreatedThatWill(String description) {
        httpPost = new YatspecHttpPostCommandBuilder(this)
                .withUrl(embersServer.embersAdminPath())
                .withQueryName(QUERY_MOST_RENTED_ITEMS)
                .withQuerySql(
                        "select i.name, nvl(count(r.item_id),0) as \"Rented Count\" " +
                                "  from items i " +
                                "  left outer join rentals r on r.item_id = i.item_id" +
                                " group by i.name" +
                                " order by 2 desc ")
                .withQueryDescription(description)
                .build();
        httpPost.setLogPrefix("Create Query - ");
        return httpPost;
    }

    private void thenTheUserCanRunTheQuery() throws Exception {
        this.httpGet = new YatspecHttpGetCommand(this);
        httpGet.setLogPrefix("Get Query - ");
        httpGet.setUrl(embersServer.embersQueryPath() + "/" + encodeString(QUERY_MOST_RENTED_ITEMS));
        httpGet.execute(interestingGivens, capturedInputAndOutputs);
    }

    private ActionUnderTest theUserWantsTheQueryChangedSoThatItWill(String description) {
        httpPost = new YatspecHttpPostCommandBuilder(this)
                .withUrl(embersServer.embersAdminPath())
                .withQueryName(QUERY_MOST_RENTED_ITEMS)
                .withQuerySql(
                        "select i.name, nvl(count(r.item_id),0) as \"Rented Count\" " +
                                "  from items i " +
                                "  left outer join rentals r on r.item_id = i.item_id" +
                                " group by i.name" +
                                " order by 2 asc ")
                .withQueryDescription(description)
                .build();
        httpPost.setLogPrefix("Updated Query - ");
        return httpPost;
    }

    private GivensBuilder aRentalDatabase() {
        embersServer.getEmbersDatabase().executeSql("CREATE TABLE ITEMS (" +
                "ITEM_ID        INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY, " +
                "NAME           VARCHAR(50)," +
                "DESCRIPTION    VARCHAR(1000)," +
                "PURCHASE_PRICE DECIMAL)");

        embersServer.getEmbersDatabase().executeSql("CREATE TABLE CUSTOMERS (" +
                "CUSTOMER_ID        INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY, " +
                "NAME           VARCHAR(100)," +
                "DESCRIPTION    VARCHAR(1000))");

        embersServer.getEmbersDatabase().executeSql("CREATE TABLE RENTALS (" +
                "RENTALS_ID      INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY, " +
                "ITEM_ID         INTEGER NOT NULL, " +
                "CUSTOMER_ID     INTEGER NOT NULL, " +
                "RENTAL_PRICE    DECIMAL NOT NULL, " +
                "EXPECTED_OUT    TIMESTAMP DEFAULT NOW, " +
                "ACTUALLY_OUT    TIMESTAMP, " +
                "EXPECTED_BACK   TIMESTAMP, " +
                "ACTUALLY_BACK   TIMESTAMP)");

        embersServer.getEmbersDatabase().executeSql("ALTER TABLE RENTALS " +
                "ADD FOREIGN KEY (CUSTOMER_ID)\n" +
                "    REFERENCES CUSTOMERS (CUSTOMER_ID) ");

        embersServer.getEmbersDatabase().executeSql("ALTER TABLE RENTALS " +
                "ADD FOREIGN KEY (ITEM_ID)\n" +
                "    REFERENCES ITEMS (ITEM_ID) ");

        embersServer.getEmbersDatabase().executeSql("insert into ITEMS (NAME, DESCRIPTION, PURCHASE_PRICE) values (" +
                "('Thing', 'its a really shinny thing', 987.12)" +
                ",('Car', 'a red car', 5999.99)" +
                ",('Mac Book Pro', 'A nice Shiny Mac book pro', 1500.59)" +
                ",('Mouse Mat', 'Cause we really need Mouse mats', 1.99)" +
                ",('Gum', 'Spearmint gum', 0.50)" +
                ")");

        embersServer.getEmbersDatabase().executeSql("insert into CUSTOMERS (NAME, DESCRIPTION) values (" +
                "('Mr Grahame Brown', 'love this customer')" +
                ",('Miss Sweaty Betty', 'Our smelliest customer')" +
                ",('Mrs Windome Meere', 'customer since 1993')" +
                ",('John Doe', 'annonymous customers')" +
                ")");

        embersServer.getEmbersDatabase().executeSql("insert into RENTALS" +
                "(ITEM_ID, CUSTOMER_ID, RENTAL_PRICE, EXPECTED_OUT, ACTUALLY_OUT, EXPECTED_BACK, ACTUALLY_BACK)" +
                "values (" +
                " ((select item_id from items where name = 'Thing'), (select customer_id from customers where name = 'Mr Grahame Brown') , 15.55,  " + nowAdjusted(-100) + ", " + nowAdjusted(-99) + ", " + nowAdjusted(-90) + ", " + nowAdjusted(-90) + ")" +
                ",((select item_id from items where name = 'Thing'), (select customer_id from customers where name = 'Miss Sweaty Betty'), 16.55, " + nowAdjusted(-50) + ", " + nowAdjusted(-49) + ", " + nowAdjusted(-40) + ", " + nowAdjusted(-40) + ")" +
                ",((select item_id from items where name = 'Thing'), (select customer_id from customers where name = 'Mrs Windome Meere'), 16.55, " + nowAdjusted(-20) + ", " + nowAdjusted(-20) + ", " + nowAdjusted(-10) + ", " + nowAdjusted(-10) + ")" +
                ",((select item_id from items where name = 'Thing'), (select customer_id from customers where name = 'John Doe')         , 18.55, " + nowAdjusted(-5) + ", " + nowAdjusted(-5) + ", " + nowAdjusted(5) + ", null)" +
                ",((select item_id from items where name = 'Mac Book Pro'), (select customer_id from customers where name = 'Mr Grahame Brown'), 15.55, " + nowAdjusted(-20) + ", " + nowAdjusted(-20) + ", " + nowAdjusted(-10) + ", " + nowAdjusted(-10) + ")" +
                ",((select item_id from items where name = 'Mac Book Pro'), (select customer_id from customers where name = 'Mr Grahame Brown'), 15.55, " + nowAdjusted(-5) + ", " + nowAdjusted(-5) + ", " + nowAdjusted(5) + ", null)" +
                ",((select item_id from items where name = 'Mouse Mat'), (select customer_id from customers where name = 'Mr Grahame Brown'), 15.55, " + nowAdjusted(-5) + ", " + nowAdjusted(-5) + ", " + nowAdjusted(5) + ", null)" +
                ",((select item_id from items where name = 'Car'), (select customer_id from customers where name = 'Mr Grahame Brown'), 15.55, " + nowAdjusted(-40) + ", " + nowAdjusted(-39) + ", " + nowAdjusted(-20) + ", " + nowAdjusted(-19) + ")" +
                ",((select item_id from items where name = 'Car'), (select customer_id from customers where name = 'Mr Grahame Brown'), 15.55, " + nowAdjusted(-20) + ", " + nowAdjusted(-19) + ", " + nowAdjusted(-10) + ", " + nowAdjusted(-10) + ")" +
                ",((select item_id from items where name = 'Car'), (select customer_id from customers where name = 'Mr Grahame Brown'), 15.55, " + nowAdjusted(-5) + ", " + nowAdjusted(-5) + ", " + nowAdjusted(5) + ", null)" +
                ")");

        return givens -> {
            logSql("Table of Items", "select * from items");
            logSql("Table of Customers", "select * from customers");
            logSql("Table of Rentals", "select * from rentals");
            return givens;
        };
    }

    private String nowAdjusted(int days) {
        return "DATE_SUB ( NOW, INTERVAL " + days + " DAY )";
    }


    private StateExtractor<ResultSetWrapper> theUserChecksTheQueriesPerformance() {
        return getAndLogTables.queryStatisticsTable("Database after - ");
    }

    private TypeSafeDiagnosingMatcher<ResultSetWrapper> andIsHappyItsFastEnough() {
        return new TypeSafeDiagnosingMatcher<ResultSetWrapper>() {
            @Override
            public void describeTo(Description description) {
                description.appendText("Not the expected result.");
            }

            @Override
            protected boolean matchesSafely(ResultSetWrapper item, Description mismatchDescription) {
                final List<Map<String, Object>> resultSet = item.getResultSet();
                assertThat(resultSet).hasSize(2);
                final Map<String, Object> firstRow = resultSet.get(0);
                assertThat(firstRow).contains(MapEntry.entry(COL_QUERY_NAME, QUERY_MOST_RENTED_ITEMS));
                assertThat(firstRow.get(COL_DURATION)).is(new Condition<Object>() {
                    @Override
                    public boolean matches(Object value) {
                        int actualDuration = Integer.parseInt(value.toString());
                        assertThat(actualDuration).isLessThan(MAX_TOLERATED_DURATION);
                        return true;
                    }
                });
                return true;
            }
        };
    }

    private void logSql(String logName, String sql) {
        try (Handle handle = embersServer.getEmbersDatabase().openDatabaseHandle()) {
            log(logName, new ResultSetWrapper(handle.createQuery(sql).list()));
        }
    }
}
